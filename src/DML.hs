{-# LANGUAGE MagicHash #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE DataKinds #-}
module DML where

import GHC.Prim(Proxy#, proxy#)
import Data.Proxy(Proxy(..))
import Data.Text.Lazy(Text)
import Control.Monad.IO.Class(MonadIO)
import Control.Monad.Trans.Reader(ReaderT)
import GHC.TypeLits

import NamedRecord
import DDL

class Ins back a where
    ins :: (MonadIO m) => a -> SessionMonad back m ()

-- | In many cases PK should be generated.
-- There are some possibilities:
-- * autogenerated PK (Sqlite, MSSQL)
-- * generated from sequence (Oracle, PostgreSQL(?)) then inserted
-- In all cases interface is the same.
-- If we need sequence name (Oracle) we can derive it from table name.
-- (Table name should be connected with DataRow a)
class InsAutoPK back a where
    insAuto :: (MonadIO m) => Proxy a -> DataRow a -> SessionMonad back m (PK a)

class AutoGenPK back a where
    getPK :: (MonadIO m) => SessionMonad back m a

instance (AutoGenPK back a) => AutoGenPK back ((n::Symbol) :> a) where
    getPK = fmap V getPK


